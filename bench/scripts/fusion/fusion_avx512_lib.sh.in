#!/bin/bash

# For custom gcc build
. $HOME/tools/gcc-13-install/bin/load.sh

# Kelvin build
#module load compilers/gcc/10.3.0
#module load papi/7.0.1/gcc-10.3.0

TREE_ROOT=/var/shared/projects/asap/graphs/adj/realworld/recent

TOOLSPATH=@CMAKE_BINARY_DIR@/tools
CILK_LIB=@graptor_ld_preload@

WEIGHTS=none

PAR_VAR=@graptor_parallel_variable@

hostname

# args 1:prog_graph_layout 2:graph-file 3:graph-name 4:start-vertex 5:threads 6:partitions 7:vlen 8:delta 9:commit
function run()
{
    local prog=$1
    local graph_path=$2
    local graph_name=$3
    local threads=$4
    local commit=$5
    local round=$6
    local part=$7
    local start=$8

    bindir=bin_avx512_$commit
    arg=""

    local outdir=./graptor_avx512/$commit
    [ -d $outdir ] || mkdir -p $outdir
    local file=$outdir/output.${commit}.t${threads}.c${part}.${prog}.${graph_name} 

    if [ ! -f $file ] ; then
	local papi_out=$file.papi
	echo $1 $2
	echo "env ${PAR_VAR}=${threads} PAPI_EVENTS=PAPI_TOT_INS,PAPI_L2_DCM,PAPI_L3_TCM,PAPI_TLB_DM PAPI_OUTPUT_DIRECTORY=${papi_out} LD_PRELOAD=\"$CILK_LIB $TOOLSPATH/interposer.so\" ./${bindir}/${prog} -c ${part} -b -s -l 16 -itimes -start $start -rounds ${round} -i ${graph_path} > $file"
	env ${PAR_VAR}=${threads} PAPI_EVENTS=PAPI_TOT_INS,PAPI_L2_DCM,PAPI_L3_TCM,PAPI_TLB_DM PAPI_OUTPUT_DIRECTORY="${papi_out}" LD_PRELOAD="$CILK_LIB $TOOLSPATH/interposer.so" ./${bindir}/${prog} -c ${part} -s -b -l 16 -itimes -start $start -rounds ${round} -i ${graph_path} > $file 2>&1
    fi
}

# one 1:bench 2:graph-path 3:graph-name 4:threads 5:commit 6:round 7:part
function one() {
    run ${1}_${2}_${3} $4 $5 $6 $7 $8 $9 ${10}
}

# args: graph start-vertex
function for_gg()
{
    local graph_path=`@CMAKE_SOURCE_DIR@/tools/graptor_tree.sh -l $TREE_ROOT materialise graptor $1 $2 $WEIGHTS`

    echo "graph path: $graph_path"

    local g="${1}_${2}"
    local start=$3
    local commit=$4

    for threads in 128 ; do # 1 4 8 16 32 64 128 ; do
	local starting_points = "@CMAKE_BUILD_DIR@/bench/scripts/fusion/starting_points/$2/$1.1000";
	cat $starting_points | head -n 10 | while read startp ; do
	    one $b BFSBool _uvbit_bitf vl16 $graph_path $g $threads $commit 10 1024 $startp
#	one $b BFSv _bitf vl16 $graph_path $g $threads $commit 10 1024 $startp
#	one $b BFSLVLv _fusion vl16 $graph_path $g $threads $commit 10 1024 $startp
	done
	
#	one $b BFSBool _uvbit_bitf vl16 $graph_path $g $threads $commit 10 1024 $start
#	one $b BFSBool _uvvid_bitf vl16 $graph_path $g $threads $commit 10 1024 $start
#
#	one $b BFSLVLv _nofusion vl16 $graph_path $g $threads $commit 10 1024 $start
#	one $b BFSLVLv _fusion vl16 $graph_path $g $threads $commit 10 1024 $start
#
#	one $b BFSLVL_narrow _nofusion vl16 $graph_path $g $threads $commit 10 1024 $start
#	one $b BFSLVL_narrow _fusion vl16 $graph_path $g $threads $commit 10 1024 $start
#
#	one $b BFSv "" vl16 $graph_path $g $threads $commit 10 1024 $start
#	one $b BFSv _bitf vl16 $graph_path $g $threads $commit 10 1024 $start
#
#	one $b CCv _nofusion vl16 $graph_path $g $threads $commit 10 1024 $start
#	one $b CCv _fusion vl16 $graph_path $g $threads $commit 10 1024 $start
#
#	one $b GC_JP_fusion _nofusion vl16 $graph_path $g $threads $commit 10 1024 $start
#	one $b GC_JP_fusion _fusion vl16 $graph_path $g $threads $commit 10 1024 $start
#	one $b GC_JP_fusion _llf_fusion vl16 $graph_path $g $threads $commit 10 1024 $start
#
#	#one $b GC_gm3p "" vl16 $graph_path $g $threads $commit 10 1024 $start
#	#one $b GC_gm3p_v2 "" vl16 $graph_path $g $threads $commit 10 1024 $start
#
#	one $b KC_bucket _nofusion vl16 $graph_path $g $threads $commit 10 1024 $start
#	one $b KC_bucket _fusion vl16 $graph_path $g $threads $commit 10 1024 $start
    done
}

true
