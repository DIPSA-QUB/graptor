#!/bin/bash

# For custom gcc build
. $HOME/tools/gcc-13-install/bin/load.sh

TREE_ROOT=/var/shared/projects/asap/graphs/adj/realworld/recent

TOOLSPATH=@CMAKE_BINARY_DIR@/tools
CILK_LIB=@graptor_ld_preload@

WEIGHTS=none

. $HOME/research/oneTBB-2020.2/build/linux_intel64_gcc_cc10.2.1_libc2.31_kernel5.10.0_release/tbbvars.sh intel64 linux auto_tbbroot

hostname

# args 1:bench 2:graph-path 3:graph-name 4:threads 5:commit 6:round
function run()
{
    local prog=$1
    local graph_path=$2
    local graph_name=$3
    local threads=$4
    local commit=$5
    local round=$6

    bindir=bin_avx512_$commit
    arg=""

    local outdir=./graptor_avx512/$commit
    [ -d $outdir ] || mkdir -p $outdir
    local file=$outdir/output.${commit}.t${threads}.r${round}.${prog}.${graph_name} 

    if [ ! -f $file ] ; then
	echo "./${bindir}/${prog} -n $threads -p -f ${graph_path} > $file"
	./${bindir}/${prog} -n $threads -p -f ${graph_path} > $file 2>&1
    fi
}

# one 1:bench 2:graph-path 3:graph-name 4:threads 5:commit 6:round
function one() {
    run ${1} $2 $3 $4 $5 $6
}

# args: graph start-vertex
function for_gg()
{
    local start=$3
    local commit=$4

    local graph_path=`@CMAKE_SOURCE_DIR@/tools/graptor_tree.sh -l $TREE_ROOT materialise mtxmkt $1 $2 $WEIGHTS`

    for threads in 128; do # 1 64 128 ; do
	for r in `seq 0 9` ; do
	    one mce $graph_path ${1}_${2} $threads $commit $r
	done
	#one mce_nohopscotch $graph_path ${1}_${2} $threads $commit 0
    done
}

true
